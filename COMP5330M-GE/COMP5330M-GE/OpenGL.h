#pragma once
#include "Platform.h"
#include <gl/GL.h>
#include "wglext.h"
#include "glext.h"

//List of gl functions that we need
//WARNING: Please don't touch without talking to Isaac first
#define GL_REQUIRED_FUNCTIONS_LIST \
GL_FUNCTION(PFNGLUSEPROGRAMPROC, glUseProgram) \
GL_FUNCTION(PFNGLSHADERSOURCEPROC, glShaderSource) \
GL_FUNCTION(PFNGLCREATESHADERPROC, glCreateShader) \
GL_FUNCTION(PFNGLCOMPILESHADERPROC, glCompileShader) \
GL_FUNCTION(PFNGLGETSHADERIVPROC, glGetShaderiv) \
GL_FUNCTION(PFNGLCREATEPROGRAMPROC, glCreateProgram) \
GL_FUNCTION(PFNGLLINKPROGRAMPROC, glLinkProgram) \
GL_FUNCTION(PFNGLGETPROGRAMIVPROC, glGetProgramiv) \
GL_FUNCTION(PFNGLATTACHSHADERPROC, glAttachShader) \
GL_FUNCTION(PFNGLDELETESHADERPROC, glDeleteShader) \
GL_FUNCTION(PFNGLGENBUFFERSPROC, glGenBuffers) \
GL_FUNCTION(PFNGLDELETEBUFFERSPROC, glDeleteBuffers) \
GL_FUNCTION(PFNGLBINDBUFFERPROC, glBindBuffer) \
GL_FUNCTION(PFNGLBUFFERDATAPROC, glBufferData) \
GL_FUNCTION(PFNGLGENVERTEXARRAYSPROC, glGenVertexArrays) \
GL_FUNCTION(PFNGLDELETEVERTEXARRAYSPROC, glDeleteVertexArrays) \
GL_FUNCTION(PFNGLBINDVERTEXARRAYPROC, glBindVertexArray) \
GL_FUNCTION(PFNGLVERTEXATTRIBPOINTERPROC, glVertexAttribPointer) \
GL_FUNCTION(PFNGLENABLEVERTEXATTRIBARRAYPROC, glEnableVertexAttribArray) \
GL_FUNCTION(PFNGLGETSHADERINFOLOGPROC, glGetShaderInfoLog)\
GL_FUNCTION(PFNGLGETUNIFORMLOCATIONPROC, glGetUniformLocation) \
GL_FUNCTION(PFNGLUNIFORMMATRIX4FVPROC, glUniformMatrix4fv) \
GL_FUNCTION(PFNGLBLENDEQUATIONPROC, glBlendEquation) \
GL_FUNCTION(PFNGLUNIFORM1IPROC, glUniform1i) \
GL_FUNCTION(PFNGLBINDSAMPLERPROC, glBindSampler) \
GL_FUNCTION(PFNGLACTIVETEXTUREPROC, glActiveTexture) \
GL_FUNCTION(PFNGLDRAWELEMENTSBASEVERTEXPROC, glDrawElementsBaseVertex) \
GL_FUNCTION(PFNGLBLENDEQUATIONSEPARATEPROC, glBlendEquationSeparate) \
GL_FUNCTION(PFNGLBLENDFUNCSEPARATEPROC, glBlendFuncSeparate) \
GL_FUNCTION(PFNGLGETPROGRAMINFOLOGPROC, glGetProgramInfoLog) \
GL_FUNCTION(PFNGLGETATTRIBLOCATIONPROC, glGetAttribLocation) \
GL_FUNCTION(PFNGLDETACHSHADERPROC, glDetachShader) \
GL_FUNCTION(PFNGLDELETEPROGRAMPROC, glDeleteProgram) \
GL_FUNCTION(PFNGLUNIFORM3FVPROC, glUniform3fv) \
GL_FUNCTION(PFNGLUNIFORM1FPROC, glUniform1fv) \
GL_FUNCTION(PFNGLMAPBUFFERRANGEPROC, glMapBufferRange) \
GL_FUNCTION(PFNGLUNMAPBUFFERPROC, glUnmapBuffer) \
GL_FUNCTION(PFNGLBINDBUFFERBASEPROC, glBindBufferBase) \
GL_FUNCTION(PFNGLGENERATEMIPMAPPROC, glGenerateMipmap) \
GL_FUNCTION(PFNGLBINDFRAMEBUFFERPROC, glBindFramebuffer) \
GL_FUNCTION(PFNGLGENFRAMEBUFFERSPROC, glGenFramebuffers) \
GL_FUNCTION(PFNGLFRAMEBUFFERTEXTURE2DPROC, glFramebufferTexture2D) \
GL_FUNCTION(PFNGLGENRENDERBUFFERSPROC, glGenRenderbuffers) \
GL_FUNCTION(PFNGLBINDRENDERBUFFERPROC, glBindRenderbuffer) \
GL_FUNCTION(PFNGLFRAMEBUFFERRENDERBUFFERPROC, glFramebufferRenderbuffer) \
GL_FUNCTION(PFNGLRENDERBUFFERSTORAGEPROC, glRenderbufferStorage) \
GL_FUNCTION(PFNGLCHECKFRAMEBUFFERSTATUSPROC, glCheckFramebufferStatus) \
GL_FUNCTION(PFNGLDELETERENDERBUFFERSPROC, glDeleteRenderbuffers) \
GL_FUNCTION(PFNGLGETACTIVEUNIFORMPROC, glGetActiveUniform) \
GL_FUNCTION(PFNGLGETUNIFORMIVPROC, glGetUniformiv) \
GL_FUNCTION(PFNGLTEXIMAGE3DPROC, glTexImage3D) \
GL_FUNCTION(PFNGLTEXSUBIMAGE3DPROC, glTexSubImage3D)

#define GL_FUNCTION(FUNCTION_TYPE, FUNCTION_NAME) extern FUNCTION_TYPE FUNCTION_NAME;
GL_REQUIRED_FUNCTIONS_LIST
#undef GL_FUNCTION

char* get_gl_error_name(GLenum gl_error);

#define GL_ERROR_CHECK(GL_FUNCTION) __GL_ERROR_CHECK__(GL_FUNCTION, __FILE__, __LINE__)

#define CALL_RESULT(LINE_NUM) gl_error_##LINE_NUM

#define __GL_ERROR_CHECK__(GL_FUNCTION, FILE_NAME, LINE_NUM) \
GL_FUNCTION; \
GLenum CALL_RESULT(LINE_NUM) = glGetError(); \
if(CALL_RESULT(LINE_NUM) != GL_NO_ERROR) \
OutputDebugStringf("OpenGL Error %s calling %s in file %s line %d\n", get_gl_error_name(CALL_RESULT(LINE_NUM)), #GL_FUNCTION, FILE_NAME, LINE_NUM)


//Sets up opengl and returns whether initialisation was successful
bool initialise_opengl(HWND window);

void opengl_check_for_errors();